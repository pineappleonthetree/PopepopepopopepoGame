#include <WiFiS3.h>
#include <Arduino.h>

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Definitions =====================

// ‡πÇ‡∏ô‡πâ‡∏ï‡∏î‡∏ô‡∏ï‡∏£‡∏µ
#define NOTE_G4 392
#define NOTE_A4 440
#define NOTE_C5 523
#define NOTE_E4 330
#define NOTE_D4 294
#define NOTE_D5 587
#define NOTE_G5 784 

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°/LED
#define CHOICE_OFF      0
#define CHOICE_NONE     0
#define CHOICE_RED  (1 << 0)
#define CHOICE_GREEN    (1 << 1)
#define CHOICE_BLUE (1 << 2)
#define CHOICE_YELLOW   (1 << 3)

#define LED_RED     A0
#define LED_GREEN   3
#define LED_BLUE    A1
#define LED_YELLOW  5

#define BUTTON_RED    9
#define BUTTON_GREEN  2
#define BUTTON_BLUE   A2
#define BUTTON_YELLOW 6

#define BUZZER1  4
#define BUZZER2  7

// Game mode & timing
#define ENTRY_TIME_LIMIT   3000   
#define MODE_MEMORY  0
#define MODE_BATTLE  1
#define MODE_BEEGEES 2

// WiFi
char ssid[] = "Pume";  
char pass[] = "wasd1234"; 

int status = WL_IDLE_STATUS;
WiFiServer server(80);

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Global Variables =====================

byte gameMode = MODE_MEMORY;
byte gameBoard[32];
byte gameRound = 0;

int current_game_score = 0; 
const int buttonPin = BUTTON_GREEN;
int buttonState = LOW;

int highScores[5] = {0, 0, 0, 0, 0}; 

int melody[] = { NOTE_G4, NOTE_A4, 0, NOTE_C5, 0, 0, NOTE_G4, 0, 0, 0, NOTE_E4, 0, NOTE_D4, NOTE_E4, NOTE_G4, 0, NOTE_D4, NOTE_E4, 0, NOTE_G4, 0, 0, NOTE_D4, 0, NOTE_E4, 0, NOTE_G4, 0, NOTE_A4, 0, NOTE_C5, 0};
int noteDuration = 115; 
int LEDnumber = 0; 

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: Prototypes =====================

int play_memory(void);
int play_battle(void);
void playMoves(void);
void add_to_moves(void);

void setLEDs(byte leds);
byte wait_for_button(void);
byte checkButton(void);
void toner(byte which, int buzz_length_ms);
void buzz_sound(int buzz_length_ms, int buzz_delay_us);

void play_winner(void);
void winner_sound(void);
void play_loser(void);
void attractMode(void);
void play_beegees(void);
void changeLED(void);
void display_current_score(int score);

void update_high_scores(int newScore);
void display_high_scores(void);

void handleWebServer(void);

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: setup() =====================

void setup() {
  Serial.begin(9600);
  while(!Serial) {}  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ Serial Monitor ‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤

  pinMode(BUTTON_RED,    INPUT_PULLUP);
  pinMode(BUTTON_GREEN,  INPUT_PULLUP);
  pinMode(BUTTON_BLUE,   INPUT_PULLUP);
  pinMode(BUTTON_YELLOW, INPUT_PULLUP);
  pinMode(LED_RED,   OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE,  OUTPUT);
  pinMode(LED_YELLOW,OUTPUT);
  pinMode(BUZZER1, OUTPUT);
  pinMode(BUZZER2, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.println("---- WiFi Diagnostics (UNO R4 WiFi + WiFiS3) ----");

  // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÑ‡∏´‡∏°
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• WiFi (WL_NO_MODULE). ‡∏ï‡∏£‡∏ß‡∏à Board/Library/USB.");
    while (true) { digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN)); delay(200); }
  }

  // 1) ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå
  Serial.print("üîß FW: ");
  Serial.println(WiFi.firmwareVersion());

  // 2) ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ SSID
  Serial.println("üîé Scanning networks...");
  int n = WiFi.scanNetworks();
  if (n <= 0) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏î‡πÜ (‡∏•‡∏≠‡∏á‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì)");
  } else {
    for (int i = 0; i < n; i++) {
      Serial.print(i); Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print("  Ch:");
      Serial.print(WiFi.channel(i));
      Serial.print("  RSSI:");
      Serial.println(WiFi.RSSI(i));
    }
  }

  // 3) SSID ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÑ‡∏´‡∏°?
  bool seenSSID = false;
  for (int i = 0; i < n; i++) if (WiFi.SSID(i) == String(ssid)) { seenSSID = true; break; }
  if (!seenSSID) {
    Serial.println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô SSID ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ (Pume). ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠/‡∏¢‡πà‡∏≤‡∏ô 2.4GHz/‡∏ã‡πà‡∏≠‡∏ô SSID/‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á.");
  }

  // 4) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏µ‡πÑ‡∏ó‡∏£‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  Serial.print("üì∂ Connecting to: "); Serial.println(ssid);
  unsigned long start = millis();
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 10) {
    attempts++;
    WiFi.disconnect(); delay(200);
    WiFi.begin(ssid, pass);     // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô WPA/WPA2 ‡∏õ‡∏Å‡∏ï‡∏¥‡∏û‡∏≠
    for (int i = 0; i < 10; i++) {
      if (WiFi.status() == WL_CONNECTED) break;
      delay(300);
      Serial.print(".");
    }
    Serial.print("  status="); Serial.println(WiFi.status());
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n‚ùå ‡∏ï‡πà‡∏≠ WiFi ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å SSID 2.4GHz, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏≠‡∏á 1‚Äì11, ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô).");
    while (true) { digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN)); delay(500); }
  }

  Serial.println("\n‚úÖ WiFi Connected");
  Serial.print("üåê IP Address: "); Serial.println(WiFi.localIP());
  Serial.print("üõú Gateway: ");    Serial.println(WiFi.gatewayIP());
  Serial.print("üß≠ DNS: ");        Serial.println(WiFi.dnsIP());

  server.begin();
  Serial.println("üåê Server started");

  // ======== ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ========
  gameMode = MODE_MEMORY;
  if (checkButton() == CHOICE_YELLOW) play_beegees();
  if (checkButton() == CHOICE_GREEN) {
    gameMode = MODE_BATTLE;
    setLEDs(CHOICE_GREEN);
    toner(CHOICE_GREEN, 150);
    setLEDs(CHOICE_RED | CHOICE_BLUE | CHOICE_YELLOW);
    while (checkButton() != CHOICE_NONE) ;
  }
  play_winner();
  display_high_scores();
}


// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: loop() =====================

void loop(void)
{
  handleWebServer();
  attractMode(); 

  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE | CHOICE_YELLOW);
  delay(1000);
  setLEDs(CHOICE_OFF);
  delay(250);

  if (gameMode == MODE_MEMORY)
  {
    if (play_memory() == 1) 
      play_winner(); 
    else 
      play_loser(); 
  }

  if (gameMode == MODE_BATTLE)
  {
    play_battle(); 
    play_loser(); 
  }
}

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 6: Web Server =====================

void handleWebServer(void) {
  buttonState = digitalRead(buttonPin);
  WiFiClient client = server.available();

  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        if (c == '\n') {
          if (currentLine.length() == 0) {

            // ---------- HTTP Header ----------
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type: text/html; charset=UTF-8");
            client.println("Connection: close");
            client.println();
            
            // ---------- HTML ----------
            client.println("<!DOCTYPE html><html lang='en'><head>");
            client.println("<meta charset='UTF-8'>");
            client.println("<meta name='viewport' content='width=device-width, initial-scale=1'>");
            client.println("<title>PopepopepopopepoGame</title>");

            // CSS Palette from image
            client.println("<style>");
            client.println(":root {"
                           "--dark:#501F5B;"
                           "--mid:#794C9E;"
                           "--light:#B89AC9;"
                           "--accent:#F9CBDF;"
                           "--bg:#8F7AB8;"
                           "}");
            client.println("body{font-family:Arial,Helvetica,sans-serif;"
                           "text-align:center;"
                           "background:linear-gradient(135deg,var(--bg),var(--light));"
                           "color:#fff;margin:0;padding:20px;}");
            client.println("h1{color:var(--accent);margin-bottom:10px;}");
            client.println(".score{font-size:2.2em;font-weight:bold;color:var(--accent);}");
            client.println("table{margin:20px auto;border-collapse:collapse;width:70%;max-width:400px;"
                           "background-color:rgba(255,255,255,0.15);border-radius:10px;overflow:hidden;}");
            client.println("th,td{padding:10px;border-bottom:1px solid rgba(255,255,255,0.2);}");
            client.println("th{background-color:rgba(0,0,0,0.25);}");
            client.println("button{background-color:var(--accent);color:var(--dark);border:none;"
                           "padding:10px 20px;font-size:16px;border-radius:6px;cursor:pointer;}");
            client.println("button:hover{background-color:#fff;color:var(--dark);}");
            client.println("</style>");

            // Simple JS auto-refresh (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
            client.println("<script>"
                           "setTimeout(()=>{location.reload();},1000);"  
                           "</script>");
            client.println("</head><body>");

            // ---------- Content ----------
            client.println("<h1>PopepopepopopepoGame</h1>");
            client.print("<p class='score'>Current Score: ");
            client.print(current_game_score);
            client.println(" level(s)</p>");

            // ‚úÖ Removed: button pin status display

            // High score table
            client.println("<h2>Top 5 High Scores</h2>");
            client.println("<table><tr><th>Rank</th><th>Score (Levels)</th></tr>");
            for (int i = 0; i < 5; i++) {
              client.print("<tr><td>");
              client.print(i + 1);
              client.print("</td><td>");
              client.print(highScores[i]);
              client.println("</td></tr>");
            }
            client.println("</table>");

            // Reset button
            client.println("<p><a href='/RESET'><button>Reset Scores</button></a></p>");
            
            // ‚úÖ Removed: "Auto-refresh every 2 seconds..." message
            client.println("</body></html>");
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        // Reset command
        if (currentLine.endsWith("GET /RESET")) {
          for (int i = 0; i < 5; i++) highScores[i] = 0;
          current_game_score = 0;
          Serial.println(">> High scores cleared via web command");
        }
      }
    }
    client.stop();
  }
}



// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 7: Game Logic =====================

int play_memory(void)
{
  randomSeed(millis()); 
  gameRound = 0; 
  
  while (1) 
  {
    add_to_moves(); 
    playMoves();    
    for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++)
    {
      byte choice = wait_for_button();
      if (choice == 0) return 0; 
      if (choice != gameBoard[currentMove]) return 0;
      handleWebServer(); 
    }
    
    display_current_score(gameRound); 
    current_game_score = gameRound; 
    delay(500); 
  }
}

int play_battle(void)
{
  gameRound = 0; 
  while (1) 
  {
    byte newButton = wait_for_button(); 
    gameBoard[gameRound++] = newButton; 
    for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++)
    {
      byte choice = wait_for_button();
      if (choice == 0) return 0; 
      if (choice != gameBoard[currentMove]) return 0;
      handleWebServer(); 
    }
    delay(100); 
  }
}

void playMoves(void)
{
  for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) 
  {
    toner(gameBoard[currentMove], 120); 
    delay(150); 
  }
}

void add_to_moves(void)
{
  byte newButton = random(0, 4); 
  if(newButton == 0) newButton = CHOICE_RED;
  else if(newButton == 1) newButton = CHOICE_GREEN;
  else if(newButton == 2) newButton = CHOICE_BLUE;
  else if(newButton == 3) newButton = CHOICE_YELLOW;
  gameBoard[gameRound++] = newButton; 
}

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 8: Hardware Control =====================

void setLEDs(byte leds)
{
  digitalWrite(LED_RED, ((leds & CHOICE_RED) != 0) ? HIGH : LOW);
  digitalWrite(LED_GREEN, ((leds & CHOICE_GREEN) != 0) ? HIGH : LOW);
  digitalWrite(LED_BLUE, ((leds & CHOICE_BLUE) != 0) ? HIGH : LOW);
  digitalWrite(LED_YELLOW, ((leds & CHOICE_YELLOW) != 0) ? HIGH : LOW);
}

byte wait_for_button(void)
{
  long startTime = millis(); 
  while ((millis() - startTime) < ENTRY_TIME_LIMIT) 
  {
    handleWebServer();
    byte button = checkButton();
    if (button != CHOICE_NONE)
    { 
      toner(button, 120); 
      while(checkButton() != CHOICE_NONE);
      delay(10); 
      return button;
    }
  }
  return CHOICE_NONE; 
}

byte checkButton(void)
{
  if (digitalRead(BUTTON_RED) == LOW) return CHOICE_RED; 
  else if (digitalRead(BUTTON_GREEN) == LOW) return CHOICE_GREEN; 
  else if (digitalRead(BUTTON_BLUE) == LOW) return CHOICE_BLUE; 
  else if (digitalRead(BUTTON_YELLOW) == LOW) return CHOICE_YELLOW;
  return CHOICE_NONE; 
}

void toner(byte which, int buzz_length_ms)
{
  setLEDs(which); 
  switch(which) 
  {
    case CHOICE_RED:    buzz_sound(buzz_length_ms, 800); break; 
    case CHOICE_GREEN:  buzz_sound(buzz_length_ms, 650); break; 
    case CHOICE_BLUE:   buzz_sound(buzz_length_ms, 500); break; 
    case CHOICE_YELLOW: buzz_sound(buzz_length_ms, 350); break; 
  }
  setLEDs(CHOICE_OFF); 
}

void buzz_sound(int buzz_length_ms, int buzz_delay_us)
{
  long buzz_length_us = buzz_length_ms * (long)1000;
  while (buzz_length_us > (buzz_delay_us * 2))
  {
    buzz_length_us -= buzz_delay_us * 2; 
    digitalWrite(BUZZER1, LOW);
    digitalWrite(BUZZER2, HIGH);
    delayMicroseconds(buzz_delay_us);
    digitalWrite(BUZZER1, HIGH);
    digitalWrite(BUZZER2, LOW);
    delayMicroseconds(buzz_delay_us);
  }
}

void winner_sound(void)
{
    buzz_sound(100, 400); 
    delay(50);
    buzz_sound(100, 300); 
    delay(50);
    buzz_sound(100, 200); 
    delay(50);
    buzz_sound(200, 100); 
}

void play_winner(void)
{
    Serial.println(F("\n========================="));
    Serial.print(F("üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà! üèÜ\n"));
    Serial.println(F("========================="));
    
    setLEDs(CHOICE_GREEN | CHOICE_YELLOW);
    winner_sound();
    delay(300);
    setLEDs(CHOICE_RED | CHOICE_BLUE);
    winner_sound();
    delay(300);
    setLEDs(CHOICE_OFF);
}

void play_loser(void)
{
  int finalScore = gameRound > 0 ? gameRound - 1 : 0; 
  current_game_score = finalScore; 
  update_high_scores(finalScore);

  Serial.println(F("\n========================="));
  Serial.print(F("!!! GAME OVER !!!\n"));
  Serial.print(F("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ: "));
  Serial.print(finalScore);
  Serial.println(F(" ‡∏î‡πà‡∏≤‡∏ô "));
  Serial.println(F("========================="));

  display_high_scores();
  
  for (int delay_us = 1000; delay_us < 5000; delay_us += 500) 
  {
    buzz_sound(50, delay_us); 
  }

  for (int i=0; i<3; i++) {
    setLEDs(CHOICE_RED);
    delay(150);
    setLEDs(CHOICE_OFF);
    delay(150);
  }
}

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 9: Attract Mode =====================

void attractMode(void)
{
  static unsigned long lastMillis = 0;
  static byte ledIndex = 0;
  if (millis() - lastMillis > 50) {
    lastMillis = millis();
    byte leds[4] = {CHOICE_RED, CHOICE_BLUE, CHOICE_GREEN, CHOICE_YELLOW};
    setLEDs(leds[ledIndex++]);
    if (ledIndex > 3) ledIndex = 0;
  }

  handleWebServer();
}

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 10: High Scores =====================

void display_current_score(int score)
{
  Serial.println(F("\n-------------------------"));
  Serial.print(F("üéâ ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà "));
  Serial.print(score);
  Serial.println(F(" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ"));
  Serial.println(F("-------------------------"));
}

void update_high_scores(int newScore)
{
  if (newScore > highScores[4]) 
  {
    highScores[4] = newScore; 
    for (int i = 0; i < 5; i++) 
    {
      for (int j = 0; j < 4 - i; j++) 
      {
        if (highScores[j] < highScores[j+1]) 
        {
          int temp = highScores[j];
          highScores[j] = highScores[j+1];
          highScores[j+1] = temp;
        }
      }
    }
  }
}

void display_high_scores(void)
{
  Serial.println(F("\n====== üèÜ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î üèÜ ======"));
  Serial.println(F("‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏î‡πà‡∏≤‡∏ô)"));
  Serial.println(F("------------------------------"));
  for (int i = 0; i < 5; i++) 
  {
    Serial.print(i + 1);
    Serial.print(F("      | "));
    Serial.println(highScores[i]);
  }
  Serial.println(F("=========================================="));
}

// ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 11: Beegees =====================

void play_beegees(void)
{
  setLEDs(CHOICE_YELLOW);
  toner(CHOICE_YELLOW, 150);
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE); 
  while(checkButton() != CHOICE_NONE) ; 
  setLEDs(CHOICE_OFF); delay(1000); 

  digitalWrite(BUZZER1, LOW); 

  while(checkButton() == CHOICE_NONE) 
  {
    for (int thisNote = 0; thisNote < 32; thisNote++) {
      changeLED(); 
      tone(BUZZER2, melody[thisNote],noteDuration); 
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      noTone(BUZZER2); 
    }
  }
}

void changeLED(void)
{
  setLEDs(1 << LEDnumber); 
  LEDnumber++; 
  if(LEDnumber > 3) LEDnumber = 0; 
}
